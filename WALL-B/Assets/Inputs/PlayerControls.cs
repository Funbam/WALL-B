//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""controls"",
            ""id"": ""cb36a8aa-782d-4c3c-9f36-0027563c1bb5"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0a2c20e8-fa21-48e7-9f63-235394d71571"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""leftThrust"",
                    ""type"": ""Button"",
                    ""id"": ""987c7cc3-9759-424a-a71d-fd027b5ee1b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rightThrust"",
                    ""type"": ""Button"",
                    ""id"": ""aaf757bb-8440-40a6-8a74-866ca90f214a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""map"",
                    ""type"": ""Button"",
                    ""id"": ""b9ec4287-b06e-4cee-a163-059e636ddee0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pause"",
                    ""type"": ""Button"",
                    ""id"": ""7f4e865b-b58c-4f01-ad9c-74b28ae51725"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e6481542-0ed7-44f2-bcea-f0c1cb0b9eec"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a20c34d-2532-41e7-918e-6901153b611a"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de0e8d3d-079c-4ad2-b856-ae24d14e76bd"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftThrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dabe6362-a1be-4ce2-a8f7-7f22a7cb1a03"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftThrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10b4ddb8-2d46-4dcc-b3bd-4464d792c900"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightThrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""791a1a4c-08b8-4860-b9dd-0942f7445d64"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightThrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""210a0afd-3efe-4845-bde0-b0b7de8a28ef"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32eb85f5-c94a-4d10-b7f5-90fc2826bf0a"",
                    ""path"": ""<HID::Microntek              USB Joystick          >/button9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""244d82f8-9715-47dd-ab98-3fe01507669a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00fff101-0098-454f-940a-3aba651b0871"",
                    ""path"": ""<HID::Microntek              USB Joystick          >/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // controls
        m_controls = asset.FindActionMap("controls", throwIfNotFound: true);
        m_controls_Jump = m_controls.FindAction("Jump", throwIfNotFound: true);
        m_controls_leftThrust = m_controls.FindAction("leftThrust", throwIfNotFound: true);
        m_controls_rightThrust = m_controls.FindAction("rightThrust", throwIfNotFound: true);
        m_controls_map = m_controls.FindAction("map", throwIfNotFound: true);
        m_controls_pause = m_controls.FindAction("pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // controls
    private readonly InputActionMap m_controls;
    private IControlsActions m_ControlsActionsCallbackInterface;
    private readonly InputAction m_controls_Jump;
    private readonly InputAction m_controls_leftThrust;
    private readonly InputAction m_controls_rightThrust;
    private readonly InputAction m_controls_map;
    private readonly InputAction m_controls_pause;
    public struct ControlsActions
    {
        private @PlayerControls m_Wrapper;
        public ControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_controls_Jump;
        public InputAction @leftThrust => m_Wrapper.m_controls_leftThrust;
        public InputAction @rightThrust => m_Wrapper.m_controls_rightThrust;
        public InputAction @map => m_Wrapper.m_controls_map;
        public InputAction @pause => m_Wrapper.m_controls_pause;
        public InputActionMap Get() { return m_Wrapper.m_controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnJump;
                @leftThrust.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnLeftThrust;
                @leftThrust.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnLeftThrust;
                @leftThrust.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnLeftThrust;
                @rightThrust.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnRightThrust;
                @rightThrust.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnRightThrust;
                @rightThrust.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnRightThrust;
                @map.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMap;
                @map.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMap;
                @map.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMap;
                @pause.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnPause;
                @pause.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnPause;
                @pause.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @leftThrust.started += instance.OnLeftThrust;
                @leftThrust.performed += instance.OnLeftThrust;
                @leftThrust.canceled += instance.OnLeftThrust;
                @rightThrust.started += instance.OnRightThrust;
                @rightThrust.performed += instance.OnRightThrust;
                @rightThrust.canceled += instance.OnRightThrust;
                @map.started += instance.OnMap;
                @map.performed += instance.OnMap;
                @map.canceled += instance.OnMap;
                @pause.started += instance.OnPause;
                @pause.performed += instance.OnPause;
                @pause.canceled += instance.OnPause;
            }
        }
    }
    public ControlsActions @controls => new ControlsActions(this);
    public interface IControlsActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnLeftThrust(InputAction.CallbackContext context);
        void OnRightThrust(InputAction.CallbackContext context);
        void OnMap(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
